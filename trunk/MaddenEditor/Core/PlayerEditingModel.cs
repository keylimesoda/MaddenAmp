/******************************************************************************
 * MaddenAmp
 * Copyright (C) 2005 Colin Goudie
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * http://maddenamp.sourceforge.net/
 * 
 * maddeneditor@tributech.com.au
 * 
 *****************************************************************************/
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.IO;
using MaddenEditor.Core;
using MaddenEditor.Core.Record;
using MaddenEditor.Core.Record.Stats;
using MaddenEditor.Core.DatEditor;

namespace MaddenEditor.Core
{
    public class PlayerEditingModel
    {
        private int currentPlayerIndex = 0;
        /** The current Team Filter */
        private string currentTeamFilter = null;
        /** The current position filter */
        private int currentPositionFilter = -1;
        /** If we are currently filtering for draft class */
        private bool currentDraftClassFilter = false;
        /** Reference to our EditorModel */
        private EditorModel model = null;
        /** Lists of hardcoded values */
        private IList<GenericRecord> helmetStyleList = null;

        private List<int> _playerlist = null;
        public List<int> playerlist
        {
            get { return _playerlist; }
        }
        public Dictionary<int, string> playernames = new Dictionary<int, string>();
        public Dictionary<int, string> duplicateplayers = new Dictionary<int, string>();

        public int filterteam = -1;
        public int filterposition = -1;
        public bool filterdraft = false;

        public List<int> ProgRank = new List<int>();
        public List<decimal> AvgOVR = new List<decimal>();

        public PlayerEditingModel(EditorModel model)
        {
            this.model = model;

            //Initialise the GenericRecord lists
            helmetStyleList = new List<GenericRecord>();

            helmetStyleList.Add(new GenericRecord("Style 1", 0));
            helmetStyleList.Add(new GenericRecord("Style 2", 1));
            helmetStyleList.Add(new GenericRecord("Style 3", 2));
            if (model.FileVersion < MaddenFileVersion.Ver2006)
            {
                helmetStyleList.Add(new GenericRecord("Revolution", 3));
            }
            else
            {
                helmetStyleList.Add(new GenericRecord("Schutt DNA", 3));
                helmetStyleList.Add(new GenericRecord("Revolution", 4));

                if (model.FileVersion > MaddenFileVersion.Ver2008)
                {
                    helmetStyleList.Add(new GenericRecord("Unknown", 5));
                    helmetStyleList.Add(new GenericRecord("Unknown", 6));
                    helmetStyleList.Add(new GenericRecord("Unknown", 7));
                }
            }
        }

        public void ExportDraftClass(string filename)
        {
            File.Delete(filename);
            StreamWriter sw = new StreamWriter(filename);

            sw.WriteLine("Generated by Madden Amp.  MDC File Version: " + model.DraftClassFields.Count);

            foreach (TableRecordModel rec in model.TableModels[EditorModel.PLAYER_TABLE].GetRecords())
            {
                PlayerRecord player = (PlayerRecord)rec;

                if (player.YearsPro != 0 || player.Deleted == true || (player.FirstName == "New" && player.LastName == "Player")) { continue; }

                foreach (string s in model.DraftClassFields[model.DraftClassFields.Count - 1])
                {
                    if (s != model.DraftClassFields[model.DraftClassFields.Count - 1][0])
                    {
                        sw.Write("\t");
                    }

                    if (player.ContainsIntField(s))
                    {
                        sw.Write(player.GetIntField(s));
                    }
                    else if (player.ContainsStringField(s))
                    {
                        sw.Write(player.GetStringField(s));
                    }
                    else
                    {
                        Trace.WriteLine("Severe Error!  Player does not contain field " + s + "!  Returning...");
                        sw.Close();
                        return;
                    }
                }

                sw.WriteLine("");
            }

            sw.Close();

        }

        // MADDEN DRAFT EDIT

        public PlayerRecord GetPlayerRecord(int recno)
        {
            return (PlayerRecord)model.TableModels[EditorModel.PLAYER_TABLE].GetRecord(recno);
        }

        public PlayerRecord GetPlayerByPlayerId(int playerId)
        {
            foreach (TableRecordModel record in model.TableModels[EditorModel.PLAYER_TABLE].GetRecords())
            {
                if (((PlayerRecord)record).PlayerId == playerId)
                {
                    currentPlayerIndex = record.RecNo;
                    return (PlayerRecord)record;
                }
            }
            return null;
        }

        public PlayerRecord CurrentPlayerRecord
        {
            get
            {
                return (PlayerRecord)model.TableModels[EditorModel.PLAYER_TABLE].GetRecord(currentPlayerIndex);
            }
            set
            {
                PlayerRecord curr = value;
                //need to set currenPlayerIndex to the correct index
                int index = 0;
                foreach (TableRecordModel rec in model.TableModels[EditorModel.PLAYER_TABLE].GetRecords())
                {
                    if (curr == rec)
                    {
                        currentPlayerIndex = index;
                        break;
                    }

                    index++;
                }
            }
        }

        public PlayerRecord GetNextPlayerRecord()
        {
            PlayerRecord record = null;

            int startingindex = currentPlayerIndex;
            while (true)
            {
                currentPlayerIndex++;
                if (currentPlayerIndex == startingindex)
                {
                    //We have looped around
                    return null;
                }

                if (currentPlayerIndex >= model.TableModels[EditorModel.PLAYER_TABLE].RecordCount)
                {
                    currentPlayerIndex = -1;
                    continue;
                }

                record = (PlayerRecord)model.TableModels[EditorModel.PLAYER_TABLE].GetRecord(currentPlayerIndex);

                if (record.FirstName == "New")
                    continue;

                //If this record is marked for deletion then skip it
                if (record.Deleted)
                {
                    continue;
                }

                if (currentTeamFilter != null)
                {
                    if (!(model.TeamModel.GetTeamNameFromTeamId(record.TeamId).Equals(currentTeamFilter)))
                    {
                        continue;
                    }
                }
                if (currentPositionFilter != -1)
                {
                    if (record.PositionId != currentPositionFilter)
                    {
                        continue;
                    }
                }
                if (currentDraftClassFilter)
                {
                    if (record.YearsPro != 0)
                    {
                        continue;
                    }
                }

                //Found one
                break;
            }

            return record;
        }

        public PlayerRecord GetPreviousPlayerRecord()
        {
            PlayerRecord record = null;

            int startingindex = currentPlayerIndex;
            while (true)
            {
                currentPlayerIndex--;
                if (currentPlayerIndex == startingindex)
                {
                    //We have looped around
                    return null;
                }

                if (currentPlayerIndex < 0)
                {
                    currentPlayerIndex = model.TableModels[EditorModel.PLAYER_TABLE].RecordCount;
                    continue;
                }

                record = (PlayerRecord)model.TableModels[EditorModel.PLAYER_TABLE].GetRecord(currentPlayerIndex);

                //If this record is marked for deletion then skip it
                if (record.Deleted)
                {
                    continue;
                }

                if (currentTeamFilter != null)
                {
                    if (!(model.TeamModel.GetTeamNameFromTeamId(record.TeamId).Equals(currentTeamFilter)))
                    {
                        continue;
                    }
                }
                if (currentPositionFilter != -1)
                {
                    if (record.PositionId != currentPositionFilter)
                    {
                        continue;
                    }
                }
                if (currentDraftClassFilter)
                {
                    if (record.YearsPro != 0)
                    {
                        continue;
                    }
                }
                if (record.FirstName == "New")
                    continue;

                //Found one
                break;
            }

            return record;
        }

        public void SetDraftClassFilter(bool use)
        {
            currentDraftClassFilter = use;
        }

        public void SetTeamFilter(string teamname)
        {
            currentTeamFilter = teamname;
        }

        public void RemoveTeamFilter()
        {
            currentTeamFilter = null;
        }

        public void SetPositionFilter(int index)
        {
            currentPositionFilter = index;
        }

        public void RemovePositionFilter()
        {
            currentPositionFilter = -1;
        }

        public Dictionary<string, TableRecordModel> SearchForPlayers(String[] names)
        {
            Trace.WriteLine("Starting search for " + names.ToString());
            //This is not going to be efficient.
            Dictionary<String, TableRecordModel> results = new Dictionary<String, TableRecordModel>();

            foreach (TableRecordModel record in model.TableModels[EditorModel.PLAYER_TABLE].GetRecords())
            {
                String firstname = record.GetStringField(PlayerRecord.FIRST_NAME);
                String lastname = record.GetStringField(PlayerRecord.LAST_NAME);

                String firstnameLower = firstname.ToLower();
                String lastnameLower = lastname.ToLower();

                bool gotmatch = true;
                foreach (String searchterm in names)
                {
                    if ((firstnameLower.IndexOf(searchterm) == -1) && (lastnameLower.IndexOf(searchterm) == -1))
                    {
                        //We don't have a match
                        gotmatch = false;
                        break;
                    }
                }
                if (gotmatch)
                {
                    String key = lastname + ", " + firstname + "   (" + model.TeamModel.GetTeamNameFromTeamId(record.GetIntField(PlayerRecord.TEAM_ID)) + ")";
                    String addkey = key;
                    int count = 1;
                    while (results.ContainsKey(addkey))
                    {
                        addkey = key + "(" + count++ + ")";
                    }
                    results.Add(addkey, (PlayerRecord)record);
                }
            }
            return results;
        }

        public InjuryRecord GetPlayersInjuryRecord(int playerId)
        {
            foreach (TableRecordModel record in model.TableModels[EditorModel.INJURY_TABLE].GetRecords())
            {
                InjuryRecord injuryRecord = (InjuryRecord)record;
                if (playerId == injuryRecord.PlayerId)
                {
                    return injuryRecord;
                }
            }
            return null;
        }

        #region Stats


        public CareerStatsOffenseRecord GetPlayersOffenseCareer(int playerId)
        {
            foreach (TableRecordModel record in model.TableModels[EditorModel.CAREER_STATS_OFFENSE_TABLE].GetRecords())
            {
                CareerStatsOffenseRecord offensecareer = (CareerStatsOffenseRecord)record;
                if (playerId == offensecareer.PlayerId)
                {
                    return offensecareer;
                }
            }
            return null;
        }

        public SeasonStatsOffenseRecord GetOffStats(int playerId, int season)
        {
            int count = 0;
            foreach (TableRecordModel record in model.TableModels[EditorModel.SEASON_STATS_OFFENSE_TABLE].GetRecords())
            {
                SeasonStatsOffenseRecord offstats = (SeasonStatsOffenseRecord)record;
                if (playerId == offstats.PlayerId)
                {
                    if (offstats.Deleted)
                        count--;
                    count++;
                    if (season == offstats.Season)
                        return offstats;
                }
            }

            return null;
        }

        public CareerStatsDefenseRecord GetPlayersDefenseCareer(int playerId)
        {
            foreach (TableRecordModel record in model.TableModels[EditorModel.CAREER_STATS_DEFENSE_TABLE].GetRecords())
            {
                CareerStatsDefenseRecord defensecareer = (CareerStatsDefenseRecord)record;
                if (playerId == defensecareer.PlayerId)
                {
                    return defensecareer;
                }
            }
            return null;
        }

        public SeasonStatsDefenseRecord GetDefenseStats(int playerId, int season)
        {
            foreach (TableRecordModel record in model.TableModels[EditorModel.SEASON_STATS_DEFENSE_TABLE].GetRecords())
            {
                SeasonStatsDefenseRecord dstats = (SeasonStatsDefenseRecord)record;
                if (playerId == dstats.PlayerId && season == dstats.Season)
                {
                    return dstats;
                }
            }
            return null;
        }

        public CareerStatsOffensiveLineRecord GetPlayersOLCareer(int playerId)
        {
            foreach (TableRecordModel record in model.TableModels[EditorModel.CAREER_STATS_OFFENSIVE_LINE_TABLE].GetRecords())
            {
                CareerStatsOffensiveLineRecord offensivelinecareer = (CareerStatsOffensiveLineRecord)record;
                if (playerId == offensivelinecareer.PlayerId)
                {
                    return offensivelinecareer;
                }
            }
            return null;
        }

        public SeasonStatsOffensiveLineRecord GetOLstats(int playerId, int season)
        {
            foreach (TableRecordModel record in model.TableModels[EditorModel.SEASON_STATS_OFFENSIVE_LINE_TABLE].GetRecords())
            {
                SeasonStatsOffensiveLineRecord SeaOL = (SeasonStatsOffensiveLineRecord)record;
                if (playerId == SeaOL.PlayerId && season == SeaOL.Season)
                {
                    return SeaOL;
                }
            }
            return null;
        }

        public CareerGamesPlayedRecord GetPlayersGamesCareer(int playerId)
        {
            foreach (TableRecordModel record in model.TableModels[EditorModel.CAREER_GAMES_PLAYED_TABLE].GetRecords())
            {
                CareerGamesPlayedRecord gamesplayedcareer = (CareerGamesPlayedRecord)record;
                if (playerId == gamesplayedcareer.PlayerId)
                {
                    return gamesplayedcareer;
                }
            }
            return null;
        }

        public SeasonGamesPlayedRecord GetSeasonGames(int playerId, int season)
        {
            foreach (TableRecordModel record in model.TableModels[EditorModel.SEASON_GAMES_PLAYED_TABLE].GetRecords())
            {
                SeasonGamesPlayedRecord gamesplayed = (SeasonGamesPlayedRecord)record;
                if (playerId == gamesplayed.PlayerId && season == gamesplayed.Season)
                {
                    return gamesplayed;
                }
            }
            return null;
        }

        public CareerPuntKickRecord GetPlayersCareerPuntKick(int playerId)
        {
            foreach (TableRecordModel record in model.TableModels[EditorModel.CAREER_STATS_KICKPUNT_TABLE].GetRecords())
            {
                CareerPuntKickRecord puntkickrecord = (CareerPuntKickRecord)record;
                if (playerId == puntkickrecord.PlayerId)
                {
                    return puntkickrecord;
                }
            }
            return null;
        }

        public SeasonPuntKickRecord GetPuntKick(int playerId, int season)
        {
            foreach (TableRecordModel record in model.TableModels[EditorModel.SEASON_STATS_KICKPUNT_TABLE].GetRecords())
            {
                SeasonPuntKickRecord puntkick = (SeasonPuntKickRecord)record;
                if (playerId == puntkick.PlayerId && season == puntkick.Season)
                {
                    return puntkick;
                }
            }
            return null;
        }

        public CareerPKReturnRecord GetPlayersCareerPKReturn(int playerId)
        {
            foreach (TableRecordModel record in model.TableModels[EditorModel.CAREER_STATS_KICKPUNT_RETURN_TABLE].GetRecords())
            {
                CareerPKReturnRecord pkreturnrecord = (CareerPKReturnRecord)record;
                if (playerId == pkreturnrecord.PlayerId)
                {
                    return pkreturnrecord;
                }
            }
            return null;
        }

        public SeasonPKReturnRecord GetPKReturn(int playerId, int season)
        {
            foreach (TableRecordModel record in model.TableModels[EditorModel.SEASON_STATS_KICKPUNT_RETURN_TABLE].GetRecords())
            {
                SeasonPKReturnRecord pkreturn = (SeasonPKReturnRecord)record;
                if (playerId == pkreturn.PlayerId && season == pkreturn.Season)
                {
                    return pkreturn;
                }
            }
            return null;
        }

        public SeasonStatsOffenseRecord CreateNewSeaOR()
        {
            return (SeasonStatsOffenseRecord)model.TableModels[EditorModel.SEASON_STATS_OFFENSE_TABLE].CreateNewRecord(true);
        }

        public void RemoveAllStats(int playerid, bool season, bool career)
        {
            if (season)
            {
                List<SeasonGamesPlayedRecord> remove1 = new List<SeasonGamesPlayedRecord>();
                foreach (SeasonGamesPlayedRecord record in model.TableModels[EditorModel.SEASON_GAMES_PLAYED_TABLE].GetRecords())
                {
                    if (record.PlayerId == playerid)
                        remove1.Add(record);
                }
                for (int c = 0; c < remove1.Count; c++)
                    remove1[c].SetDeleteFlag(true);

                List<SeasonPKReturnRecord> remove2 = new List<SeasonPKReturnRecord>();
                foreach (SeasonPKReturnRecord record in model.TableModels[EditorModel.SEASON_STATS_KICKPUNT_RETURN_TABLE].GetRecords())
                {
                    if (record.PlayerId == playerid)
                        remove2.Add(record);
                }
                for (int c = 0; c < remove2.Count; c++)
                    remove2[c].SetDeleteFlag(true);


                List<SeasonPuntKickRecord> remove3 = new List<SeasonPuntKickRecord>();
                foreach (SeasonPuntKickRecord record in model.TableModels[EditorModel.SEASON_STATS_KICKPUNT_TABLE].GetRecords())
                {
                    if (record.PlayerId == playerid)
                        remove3.Add(record);
                }
                for (int c = 0; c < remove3.Count; c++)
                    remove3[c].SetDeleteFlag(true);

                List<SeasonStatsDefenseRecord> remove4 = new List<SeasonStatsDefenseRecord>();
                foreach (SeasonStatsDefenseRecord record in model.TableModels[EditorModel.SEASON_STATS_DEFENSE_TABLE].GetRecords())
                {
                    if (record.PlayerId == playerid)
                        remove4.Add(record);
                }
                for (int c = 0; c < remove4.Count; c++)
                    remove4[c].SetDeleteFlag(true);

                List<SeasonStatsOffenseRecord> remove5 = new List<SeasonStatsOffenseRecord>();
                foreach (SeasonStatsOffenseRecord record in model.TableModels[EditorModel.SEASON_STATS_OFFENSE_TABLE].GetRecords())
                {
                    if (record.PlayerId == playerid)
                        remove5.Add(record);
                }
                for (int c = 0; c < remove5.Count; c++)
                    remove5[c].SetDeleteFlag(true);

                List<SeasonStatsOffensiveLineRecord> remove6 = new List<SeasonStatsOffensiveLineRecord>();
                foreach (SeasonStatsOffensiveLineRecord record in model.TableModels[EditorModel.SEASON_STATS_OFFENSIVE_LINE_TABLE].GetRecords())
                {
                    if (record.PlayerId == playerid)
                        remove6.Add(record);
                }
                for (int c = 0; c < remove6.Count; c++)
                    remove6[c].SetDeleteFlag(true);
            }

            else if (career)
            {
                foreach (CareerGamesPlayedRecord record in model.TableModels[EditorModel.CAREER_GAMES_PLAYED_TABLE].GetRecords())
                {
                    if (record.PlayerId == playerid)
                    {
                        record.SetDeleteFlag(true);
                        break;
                    }
                }

                foreach (CareerPKReturnRecord record in model.TableModels[EditorModel.CAREER_STATS_KICKPUNT_RETURN_TABLE].GetRecords())
                {
                    if (record.PlayerId == playerid)
                    {
                        record.SetDeleteFlag(true);
                        break;
                    }
                }

                foreach (CareerPuntKickRecord record in model.TableModels[EditorModel.CAREER_STATS_KICKPUNT_TABLE].GetRecords())
                {
                    if (record.PlayerId == playerid)
                    {
                        record.SetDeleteFlag(true);
                        break;
                    }
                }

                foreach (CareerStatsDefenseRecord record in model.TableModels[EditorModel.CAREER_STATS_DEFENSE_TABLE].GetRecords())
                {
                    if (record.PlayerId == playerid)
                    {
                        record.SetDeleteFlag(true);
                        break;
                    }
                }

                foreach (CareerStatsOffenseRecord record in model.TableModels[EditorModel.CAREER_STATS_OFFENSE_TABLE].GetRecords())
                {
                    if (record.PlayerId == playerid)
                    {
                        record.SetDeleteFlag(true);
                        break;
                    }
                }

                foreach (CareerStatsOffensiveLineRecord record in model.TableModels[EditorModel.CAREER_STATS_OFFENSIVE_LINE_TABLE].GetRecords())
                {
                    if (record.PlayerId == playerid)
                    {
                        record.SetDeleteFlag(true);
                        break;
                    }
                }
            }
        }

        #endregion

        //  To do, change player's previous team
        //  check for team min/max at position etc
        public void ChangePlayersTeam(TeamRecord newTeam)
        {
            //Don't do anything if the team is same as the current players team
            if (CurrentPlayerRecord.TeamId != newTeam.TeamId)
            {
                //Also have to ensure we update this players injuries in the injury table
                //and remove this player from any depth charts

                foreach (TableRecordModel record in model.TableModels[EditorModel.INJURY_TABLE].GetRecords())
                {
                    if (record.Deleted)
                        continue;
                    //If this injury record is for this player then update its team field
                    InjuryRecord injRecord = (InjuryRecord)record;

                    if (injRecord.PlayerId == CurrentPlayerRecord.PlayerId)
                    {
                        injRecord.TeamId = newTeam.TeamId;
                    }
                }

                if (CurrentPlayerRecord.TeamId < 1009)
                {
                    RemovePlayerFromDepthChart(CurrentPlayerRecord.PlayerId);
                    CurrentPlayerRecord.PreviousTeamId = CurrentPlayerRecord.TeamId;
                }
                else
                {
                    if (CurrentPlayerRecord.PreviousTeamId >= 1009 && newTeam.TeamId < 1009)
                        CurrentPlayerRecord.PreviousTeamId = newTeam.TeamId;
                    else CurrentPlayerRecord.PreviousTeamId = CurrentPlayerRecord.TeamId;
                }

                CurrentPlayerRecord.TeamId = newTeam.TeamId;
            }
        }

        /// <summary>
        /// TODO:
        /// This method should be put into the depth chart editing model at some stage.
        /// The whole depth chart editing functionality has too much logic in the scoutingForm objects
        /// and it needs to be moved into the depth chart editing model
        /// </summary>
        /// <param name="playerId"></param>
        public void RemovePlayerFromDepthChart(int playerId)
        {
            List<DepthChartRecord> oldDepthChartRecords = new List<DepthChartRecord>();

            foreach (TableRecordModel record in model.TableModels[EditorModel.DEPTH_CHART_TABLE].GetRecords())
            {
                if (record.Deleted)
                    continue;

                DepthChartRecord depthRecord = (DepthChartRecord)record;

                if (depthRecord.PlayerId == playerId)
                {
                    // Can't delete yet, unless player exists only once in depth chart
                    // Now record the position and team and depth cause we want to fix up
                    // the other players ordering in that same position
                    oldDepthChartRecords.Add(depthRecord);
                }
            }
            // Now delete all the depth chart records for this player.
            for (int p = 0; p < oldDepthChartRecords.Count; p++)
            {
                oldDepthChartRecords[p].SetDeleteFlag(true);
            }

            // Now we have a list of the old depth charts that this player belongs too, we need to fix each 
            // one up. This is not going to be very efficient :)

            foreach (DepthChartRecord record in oldDepthChartRecords)
            {
                foreach (TableRecordModel depthChartRec in model.TableModels[EditorModel.DEPTH_CHART_TABLE].GetRecords())
                {
                    if (depthChartRec.Deleted)
                        continue;

                    DepthChartRecord depthRecord = (DepthChartRecord)depthChartRec;

                    if (depthRecord.TeamId == record.TeamId && depthRecord.PositionId == record.PositionId)
                    {
                        if (depthRecord.DepthOrder > record.DepthOrder)
                        {
                            depthRecord.DepthOrder--;
                        }

                        //TODO: We could probably exit early after we found like 6 or something
                        //records cause thats the maximum depth chart level anyway. but we'll try this
                        //first
                    }
                }
            }
        }

        public void DeletePlayerRecord(PlayerRecord record)
        {
            //Mark this record for deletion
            record.SetDeleteFlag(true);

            //Remove this player from any depth charts
            RemovePlayerFromDepthChart(record.PlayerId);
        }

        public IList<GenericRecord> HelmetStyleList
        {
            get
            {
                return helmetStyleList;
            }
        }

        public InjuryRecord CreateNewInjuryRecord()
        {
            return (InjuryRecord)model.TableModels[EditorModel.INJURY_TABLE].CreateNewRecord(true);
        }

        public PlayerRecord CreateNewPlayerRecord()
        {
            // Either we have to set this bool to true to allow the creation of a
            // new table, or we have to check first if we have one marked for deletion
            // otherwise it replaces one that is already active I think?

            return (PlayerRecord)model.TableModels[EditorModel.PLAYER_TABLE].CreateNewRecord(true);
        }

        public List<string> GetPlayerList()
        {
            if (_playerlist == null)
                _playerlist = new List<int>();
            else _playerlist.Clear();
            List<String> Players = new List<string>();
            playernames.Clear();

            foreach (TableRecordModel rec in model.TableModels[EditorModel.PLAYER_TABLE].GetRecords())
            {
                if (rec.Deleted)
                    continue;
                PlayerRecord play = (PlayerRecord)rec;
                if (play.FirstName == "New")
                    continue;

                if (filterdraft)
                {
                    if (play.YearsPro == 0)
                    {
                        if (filterteam == -1 || filterposition == -1)
                        {
                            if (filterteam == -1 && filterposition == -1)
                                _playerlist.Add(play.PlayerId);
                            else if (filterteam == -1 && filterposition == play.PositionId)
                                _playerlist.Add(play.PlayerId);
                            else if (filterposition == -1 && filterteam == play.TeamId)
                                _playerlist.Add(play.PlayerId);
                            else continue;
                        }
                        else if (filterteam == play.TeamId && filterposition == play.PositionId)
                            _playerlist.Add(play.PlayerId);
                        else continue;
                    }
                    else continue;
                }

                else if (filterteam == -1 || filterposition == -1)
                {
                    if (filterteam == -1 && filterposition == -1)
                        _playerlist.Add(play.PlayerId);
                    else if (filterteam == -1)
                    {
                        if (filterposition == play.PositionId)
                            _playerlist.Add(play.PlayerId);
                        else continue;
                    }
                    else if (filterposition == -1)
                    {
                        if (filterteam == play.TeamId)
                            _playerlist.Add(play.PlayerId);
                        else continue;
                    }
                    else continue;
                }

                else if (filterteam == play.TeamId && filterposition == play.PositionId)
                    _playerlist.Add(play.PlayerId);

                else continue;
            }

            _playerlist.Sort();
            foreach (int i in _playerlist)
            {
                PlayerRecord named = GetPlayerByPlayerId(i);
                Players.Add(named.FirstName + " " + named.LastName);
                if (!playernames.ContainsKey(i))
                    playernames.Add(i, named.FirstName + " " + named.LastName);
                else
                {
                    if (!duplicateplayers.ContainsKey(i))
                        duplicateplayers.Add(i, named.FirstName + " " + named.LastName);
                }
            }

            return Players;
        }

        public int GetDraftedPosition()
        {
            switch (CurrentPlayerRecord.OriginalPositionId)
            {
                case (int)MaddenPositions.QB:
                    return 0;
                case (int)MaddenPositions.HB:
                    return 1;
                case (int)MaddenPositions.FB:
                    return 2;
                case (int)MaddenPositions.WR:
                    return 3;
                case (int)MaddenPositions.TE:
                    return 4;
                case (int)MaddenPositions.LT:
                case (int)MaddenPositions.RT:
                    return 5;
                case (int)MaddenPositions.LG:
                case (int)MaddenPositions.RG:
                    return 6;
                case (int)MaddenPositions.C:
                    return 7;
                case (int)MaddenPositions.LE:
                case (int)MaddenPositions.RE:
                    return 8;
                case (int)MaddenPositions.DT:
                    return 9;
                case (int)MaddenPositions.LOLB:
                case (int)MaddenPositions.ROLB:
                    return 10;
                case (int)MaddenPositions.MLB:
                    return 11;
                case (int)MaddenPositions.CB:
                    return 12;
                case (int)MaddenPositions.FS:
                    return 13;
                case (int)MaddenPositions.SS:
                    return 14;
                case (int)MaddenPositions.K:
                    return 15;
                case (int)MaddenPositions.P:
                    return 16;
                default:
                    return -1;
            }
        }

        public void SetProgressionRank()
        {
            ProgRank.Clear();
            AvgOVR.Clear();

            if (model.FileType != MaddenFileType.Franchise)
                return;

            for (int i = 0; i < 3; i++)
            {
                ProgRank.Add(0);
                AvgOVR.Add(0);
            }

            int testgroup = 0;
            if (model.PlayerModel.CurrentPlayerRecord.Overall >= 90)
                testgroup = 0;
            else if (model.PlayerModel.CurrentPlayerRecord.Overall >= 82 && model.PlayerModel.CurrentPlayerRecord.Overall <= 89)
                testgroup = 1;
            else if (model.PlayerModel.CurrentPlayerRecord.Overall >= 76 && model.PlayerModel.CurrentPlayerRecord.Overall <= 81)
                testgroup = 2;
            else if (model.PlayerModel.CurrentPlayerRecord.Overall >= 70 && model.PlayerModel.CurrentPlayerRecord.Overall <= 75)
                testgroup = 3;
            else if (model.PlayerModel.CurrentPlayerRecord.Overall >= 60 && model.PlayerModel.CurrentPlayerRecord.Overall <= 69)
                testgroup = 4;
            else if (model.PlayerModel.CurrentPlayerRecord.Overall >= 0 && model.PlayerModel.CurrentPlayerRecord.Overall <= 59)
                testgroup = 5;

            int totalovr = 0;
            int ovr = 0;
            int both = 0;

            foreach (PlayerRecord rec in model.TableModels[EditorModel.PLAYER_TABLE].GetRecords())
            {
                if (rec.PlayedGames == 0)
                    continue;

                if (rec.PositionId == CurrentPlayerRecord.PositionId)
                {
                    bool ck1 = false;
                    bool ck2 = false;

                    int checkgroup = 0;
                    if (rec.Overall >= 90)
                        checkgroup = 0;
                    else if (rec.Overall >= 82 && rec.Overall <= 89)
                        checkgroup = 1;
                    else if (rec.Overall >= 76 && rec.Overall <= 81)
                        checkgroup = 2;
                    else if (rec.Overall >= 70 && rec.Overall <= 75)
                        checkgroup = 3;
                    else if (rec.Overall >= 60 && rec.Overall <= 69)
                        checkgroup = 4;
                    else if (rec.Overall >= 0 && rec.Overall <= 59)
                        checkgroup = 5;

                    if (testgroup == checkgroup)
                    {
                        totalovr += rec.Ppsp;
                        ovr++;
                        if (rec.Ppsp > ProgRank[0])
                            ProgRank[0] = rec.Ppsp;
                        ck1 = true;
                    }

                    if (CurrentPlayerRecord.CareerPhase == rec.CareerPhase)
                    {
                        if (rec.Ppsp > ProgRank[1])
                            ProgRank[1] = rec.Ppsp;
                        ck2 = true;
                    }

                    if (ck1 && ck2)
                    {
                        if (rec.Ppsp > ProgRank[2])
                            ProgRank[2] = rec.Ppsp;
                    }
                }
            }
            if (totalovr > 0 && ovr > 0)
                AvgOVR[0] = (Decimal)totalovr / ovr;


        }

        public void ClearDraftClass(int round, int index, int resumepick)
        {
            foreach (PlayerRecord play in model.TableModels[EditorModel.PLAYER_TABLE].GetRecords())
            {
                if (play.YearsPro == 0)
                {
                    if (play.DraftRound > round)
                    {
                        if (play.DraftRoundIndex >= index)
                        {
                            play.DraftRound = 0;
                            play.DraftRoundIndex = 0;
                            play.TeamId = 1015;
                            play.PreviousTeamId = 1023;
                        }
                    }
                }
            }

            foreach (DraftedPlayers rook in model.TableModels[EditorModel.DRAFTED_PLAYERS_TABLE].GetRecords())
            {

                if (rook.DraftPickNumber >= resumepick - 1)
                {
                    rook.DraftPickRound = 15;
                    rook.DraftPickNumber = 511;
                    rook.DraftPickTeam = 1023;
                    rook.PlayerWeightedRating = 0;

                    if (model.FileVersion >= MaddenFileVersion.Ver2005)
                    {
                        rook.DraftGeneralRating = 0;
                        rook.DraftGPO = 0;
                        rook.DraftPJR = 4;
                    }
                }
                else
                {
                    bool stop = true;
                }
            }
        }

        public void CalculateRookieRatings()
        {
            foreach (PlayerRecord player in model.TableModels[EditorModel.PLAYER_TABLE].GetRecords())
            {
                if (player.YearsPro == 0)
                    player.Overall = player.CalculateOverallRating(player.PositionId, false);
            }
        }
    }
}
    

